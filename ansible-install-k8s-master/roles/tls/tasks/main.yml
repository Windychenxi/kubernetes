---
# tasks file for tls

- name: 获取 Ansible 工作目录
  shell:
    cmd: pwd | sed 's#roles/tls##'
  register: root_dir

- name: 创建工作目录
  file:
    path: "{{ root_dir.stdout }}/ssl/{{ item }}"
    state: directory
  with_items:
    - ca
    - etcd
    - kubernetes

- name: 准备 cfssl 工具
  unarchive:
    src: "{{ software_dir }}/cfssl.tar.gz"
    dest: /usr/bin/
    mode: 700

- name: 分发 CA 证书准备文件 ca-csr.json | ca-config.json
  copy:
    src: "ca/{{ item }}"
    dest: "{{ root_dir.stdout }}/ssl/ca/{{ item }}"
  with_items: 
    - ca-csr.json
    - ca-config.json

#---------------------------------- 创建 CA 证书 -------------------------------------

- name: 创建 CA 证书
  shell: |
    cd {{ root_dir.stdout }}/ssl/ca/  \
    && cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    
- name: 拷贝 CA 证书到 etcd | kubernetes 目录
  shell: |
    cd {{ root_dir.stdout }}/ssl/ca \
    && cp -r ca*.pem ca-config.json {{ root_dir.stdout }}/ssl/{{ item }}
  with_items:
    - etcd
    - kubernetes

#---------------------------------- 创建 etcd 证书 -----------------------------------
   
- name: 分发 etcd 证书准备文件 etcd-csr.json | copy_etcd_cert.sh
  template:
    src: "etcd/{{ item }}"
    dest: "{{ root_dir.stdout }}/ssl/etcd/{{ item.split('.j2')[0] }}"
    mode: 700
  with_items:
    - etcd-csr.json.j2
    - copy_etcd_cert.sh.j2
    
- name: 创建 etcd 证书
  shell: |
    cd {{ root_dir.stdout }}/ssl/etcd/  \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson  -bare etcd

- name: 执行拷贝 etcd 证书脚本，拷贝证书到 tmp 目录
  shell: |
    cd {{ root_dir.stdout }}/ssl/etcd/ \
    && sh copy_etcd_cert.sh
    
#----------------------------  创建 kubernetes 证书 ----------------------------------

- name: 分发 kubernetes 证书模板文件（api-server | kubectl | kube-controller-manager | kube-scheduler）
  template:
    src: "kubernetes/{{ item }}"
    dest: "{{ root_dir.stdout }}/ssl/kubernetes/{{ item.split('.j2')[0] }}"
    mode: 700
  with_items:
    - kube-apiserver-csr.json.j2
    - kube-controller-manager-csr.json.j2
    - kube-scheduler-csr.json.j2
    - copy_kubernetes_cert.sh.j2

- name: 分发 kubernetes 证书准备文件
  copy:
    src: "kubernetes/{{ item }}"
    dest: "{{ root_dir.stdout }}/ssl/kubernetes/{{ item }}"
  with_items:
    - admin-csr.json
    - kube-proxy-csr.json

- name: 创建 kubernetes 证书
  shell: |
    cd {{ root_dir.stdout }}/ssl/kubernetes \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler \
    && cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy

- name: 生成 token 文件
  shell: |
    cat > {{ root_dir.stdout }}/ssl/kubernetes/token.csv << EOF
    $(head -c 16 /dev/urandom | od -An -t x | tr -d ' '),kubelet-bootstrap,10001,"system:kubelet-bootstrap"
    EOF
    
- name: 执行拷贝 kubernetes 证书脚本，拷贝证书到 root 目录
  shell: |
    cd {{ root_dir.stdout }}/ssl/kubernetes/  \
    && sh copy_kubernetes_cert.sh